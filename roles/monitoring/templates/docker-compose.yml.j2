version: "3"

secrets:
  Elastic_Password:
    external: true

configs:
  logstash_pipeline:
    file: ./logstash.conf
  kibana_config:
    file: ./kibana.yml
  elastic_config:
    file: ./elasticsearch/config/elasticsearch.yml
  logstash_config:
    file: ./logstash/config/logstash.yml


services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    environment:
      - discovery.type=single-node # Dev Env. Disable Bootstrap Checks
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms2g -Xmx2g -Des.enforce.bootstrap.checks=true
      - ELASTIC_PASSWORD_FILE=/run/secrets/Elastic_Password
      - network.publish_host=_eth0_
    configs:
      - source: elastic_config
        target: /usr/share/elasticsearch/config/elasticsearch.yml
    volumes:
      - esdata:/usr/share/elasticsearch/data

  logstash:
    image: docker.elastic.co/logstash/logstash:7.10.1
    ports:
      - "12201:12201/udp"
    depends_on:
      - elasticsearch
    deploy:
      mode: global
    environment:
      - LOGSPOUT=ignore
      - DROP_NON_JSON=false
      - STDOUT=true
    configs:
      - source: logstash_config
        target: /usr/share/logstash/config/logstash.yml
      - source: logstash_pipeline
        target: /usr/share/logstash/pipeline/logstash.conf
    volumes:
      - logstash-pipeline:/usr/share/logstash/pipeline/

    logspout:
    image: gliderlabs/logspout:latest
    networks:
      - logging
    volumes:
      - /etc/hostname:/etc/host_hostname:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      'syslog://logstash:5000'
    deploy:
      mode: global
      resources:
        limits:
          cpus: '0.20'
          memory: 256M
        reservations:
          cpus: '0.10'
          memory: 128M

  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.1
    depends_on:
      - elasticsearch
    configs:
      - source: kibana_config
        target: /usr/share/kibana/config/kibana.yml
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - LOGSPOUT=ignore
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.kibana.rule=Host(`kibana.{{ DOMAINNAME }}`)
        - traefik.http.routers.kibana.entrypoints=websecure
        - traefik.http.services.kibana.loadbalancer.server.port=9000
        - traefik.http.routers.kibana.tls=true
        - traefik.http.routers.kibana.tls.certresolver=myresolver
        - traefik.http.routers.kibana.middlewares=authelia@file,secheader@file

  portainer:
    image: portainer/portainer:latest
#    command: -H tcp://tasks.agent:9001 --tlsskipverify
    command: ["-H", "tcp://tasks.agent:9001", "--tlsskipverify", "--no-auth"]
    volumes:
      - portainer_data:/data
    networks:
      - agent_network
      - {{ EDGE_Network_Name }}
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
      labels:
        - traefik.enable=true
        - traefik.http.routers.portainer.rule=Host(`docker.{{ DOMAINNAME }}`)
        - traefik.http.routers.portainer.entrypoints=websecure
        - traefik.http.services.portainer.loadbalancer.server.port=9000
        - traefik.http.routers.portainer.tls=true
        - traefik.http.routers.portainer.tls.certresolver=myresolver
        - traefik.http.routers.portainer.middlewares=authelia@file,secheader@file

  agent:
    image: portainer/agent:latest
    environment:
      # REQUIRED: Should be equal to the service name prefixed by "tasks." when
      # deployed inside an overlay network
      AGENT_CLUSTER_ADDR: tasks.agent
      # AGENT_PORT: 9001
      # LOG_LEVEL: debug
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent_network
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]


volumes:
  esdata:
    driver: local
  logstash-pipeline:
    driver: local
  portainer_data:
    driver: local

networks:
  {{ EDGE_Network_Name }}:
    external: true
    name: {{ EDGE_Network_Name }}
  agent_network:
    driver: overlay
    attachable: false